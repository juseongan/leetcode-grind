class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        letterMap = {"2": "abc", "3": "def", "4": "ghi", "5": "jkl", "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"}
        
        def backtrack(idx, combination):
            # if the path is the same length as digits, we have a complete combination
            if len(combination) == len(digits):
                combinations.append(combination)
                return
            
            # loop through all the possible letters
            for letter in letterMap[digits[idx]]:
                backtrack(idx + 1, combination + letter)
            
        combinations = []
        if digits:
            backtrack(0, "")
            
        return combinations